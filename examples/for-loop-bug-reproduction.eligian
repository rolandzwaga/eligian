// Bug Reproduction: For-Loop Variable References Not Compiled
// BUG-001: System property references (@@varName) inside for-loops
// produce empty operationData objects

// Test Case 1: For-loop with @@loopVar reference
action testForLoopReference() [
  for (section in ["intro", "main", "outro"]) {
    // ❌ BUG: selectElement(@@section) should compile to:
    //    { operationData: { selector: "$scope.currentItem" } }
    // But actually compiles to:
    //    { operationData: {} }
    selectElement(@@section)
    addClass("active")
    wait(500)
  }
]

// Test Case 2: Action with @varName reference
action testVariableReference() [
  const selector = "#box"

  // ❌ BUG: selectElement(@selector) should compile to:
  //    { operationData: { selector: "$scope.variables.selector" } }
  // But likely compiles to empty operationData
  selectElement(@selector)
  addClass("highlight")
]

// Test Case 3: Action with bare parameter reference
action testParameterReference(selector, duration) [
  // ❌ BUG: selectElement(selector) should compile to:
  //    { operationData: { selector: "$operationdata.selector" } }
  // But likely compiles to empty operationData
  selectElement(selector)

  // ❌ BUG: animate with duration parameter
  animate({opacity: 1}, duration)
]

// Test Case 4: Nested for-loops (edge case)
action testNestedForLoops() [
  for (section in ["intro", "main"]) {
    selectElement(@@section)

    for (item in [1, 2, 3]) {
      // Nested loop variable
      setData({ index: @@item })
    }
  }
]

timeline "bug-reproduction" using raf {
  at 0s..5s {
    testForLoopReference()
  }
  at 5s..8s {
    testVariableReference()
  }
  at 8s..12s {
    testParameterReference("#card", 1000)
  }
  at 12s..15s {
    testNestedForLoops()
  }
}
