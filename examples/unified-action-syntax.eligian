/**
 * Unified Action and Operation Call Syntax Demo
 *
 * This example demonstrates the unified syntax where custom actions
 * and built-in operations are called identically in all contexts.
 */

// Define some custom actions
action fadeIn(selector: string, duration: number) [
  selectElement($operationdata.selector)
  setStyle({opacity: 0})
  animate({opacity: 1}, $operationdata.duration)
]

endable action highlight(selector: string) [
  selectElement($operationdata.selector)
  addClass("highlight")
] [
  removeClass("highlight")
]

action showAll(items: array) [
  for (item in $operationdata.items) {
    selectElement(@@item)
    addClass("visible")
  }
]

// Timeline demonstrating unified syntax
timeline "demo" in "#app" using raf {
  // 1. Direct action call - unified syntax (no braces!)
  at 0s..2s fadeIn("#title", 1000)

  // 2. Direct operation call - same syntax as actions
  at 2s..3s wait(500)

  // 3. Mixed action and operation calls in inline block
  at 3s..5s [
    fadeIn("#subtitle", 500)    // Custom action
    selectElement("#content")   // Built-in operation
    addClass("visible")         // Built-in operation
  ] [
    removeClass("visible")
  ]

  // 4. Endable action call - unified syntax
  at 5s..8s highlight("#important")

  // 5. Control flow with mixed calls
  at 8s..12s for (box in ["#box1", "#box2", "#box3"]) {
    fadeIn(@@box, 300)        // Custom action in loop
    wait(200)                 // Built-in operation in loop
  }

  // 6. Conditional with mixed calls
  at 12s..15s if (true) {
    highlight("#success")     // Custom action in if
    setStyle({color: "green"})  // Built-in operation in if
  }

  // 7. Action with array parameter
  at 15s..18s showAll([".item-1", ".item-2", ".item-3"])
}

// Sequence block - all calls use unified syntax
sequence {
  fadeIn("#intro", 500) for 2s
  highlight("#main") for 3s
  fadeIn("#outro", 500) for 2s
}

// Stagger block - action call uses unified syntax
stagger 200ms [".item-1", ".item-2", ".item-3"] with fadeIn() for 1s

/**
 * Key Benefits of Unified Syntax:
 *
 * 1. **Consistency**: Same syntax everywhere (timeline events, control flow, sequences, stagger)
 * 2. **Simplicity**: No need to remember { } for actions vs [ ] for operations
 * 3. **Safety**: Compiler prevents action names from conflicting with operations
 * 4. **Flexibility**: Mix custom actions and built-in operations freely
 *
 * What Happens at Compile Time:
 *
 * - `fadeIn("#title", 1000)` → Resolves to custom action → Expands to requestAction + startAction
 * - `wait(500)` → Resolves to built-in operation → Generates operation call directly
 * - Compiler automatically distinguishes based on name resolution
 * - If name not found in either: error with suggestions from both actions and operations
 */
