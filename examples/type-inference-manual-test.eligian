// Manual Test File: Type Inference (US3)
//
// Testing Goals:
// - T055: Unannotated parameter inferred as 'string' when passed to selectElement()
// - T056: Unannotated parameter inferred as 'number' when passed to animate() duration
// - T057: Conflicting type usage (parameter used as both string and number) shows error
// - T058: Inference success rate validation (90% of clear patterns inferred correctly)
//
// Instructions:
// 1. Open this file in VS Code with Eligian extension
// 2. Verify NO red squiggles on lines marked "✅ NO ERROR"
// 3. Verify RED squiggles on lines marked "❌ ERROR"
// 4. Hover over errors to see type conflict messages

// ============================================================================
// T055: Parameter inferred as 'string' from selectElement() usage
// ============================================================================

// Action with unannotated selector parameter
// Expected: selector is inferred as 'string' because selectElement() expects string
action fadeIn(selector, duration) [
  selectElement(selector)  // ✅ NO ERROR - selector inferred as 'string'
  animate({opacity: 1}, duration)  // ✅ NO ERROR - duration inferred as 'number'
]

// ============================================================================
// T056: Parameter inferred as 'number' from animate() duration usage
// ============================================================================

// Action with unannotated duration parameter
// Expected: duration is inferred as 'number' because animate() expects number
action fade(selector, duration) [
  selectElement(selector)  // ✅ NO ERROR - selector inferred as 'string'
  animate({opacity: 1}, duration)  // ✅ NO ERROR - duration inferred as 'number'
]

// ============================================================================
// T057: Conflicting type usage shows error
// ============================================================================

// Action with parameter used as both string and number
// Expected: ERROR - conflicting inferred types
action broken(value) [
  selectElement(value)  // Infers value as 'string'
  animate({opacity: 1}, value)  // ❌ ERROR: value also used as 'number' - conflict!
]

// ============================================================================
// T058: Inference success rate validation
// ============================================================================

// Multiple parameters with clear usage patterns
// Expected: All parameters correctly inferred without annotations
action complexAction(
  selector,      // Inferred as 'string' from selectElement()
  duration,      // Inferred as 'number' from animate()
  properties     // Inferred as 'object' from animate()
) [
  selectElement(selector)  // ✅ NO ERROR
  animate(properties, duration)  // ✅ NO ERROR
]

// Variable type inference from literal values
const myString = "hello"       // Inferred as 'string'
const myNumber = 42            // Inferred as 'number'
const myBoolean = true         // Inferred as 'boolean'
const myObject = {x: 1, y: 2}  // Inferred as 'object'
const myArray = [1, 2, 3]      // Inferred as 'array'

// Using inferred variables in operations (no type mismatches)
timeline "inference-test" in "#container" using raf {
  at 0s..1s [
    selectElement(@@myString)  // ✅ NO ERROR - myString is 'string'
  ] [
    selectElement(@@myString)
  ]

  // ❌ ERROR: Type mismatch - myNumber is 'number', selectElement expects 'string'
  at 1s..2s [
    selectElement(@@myNumber)
  ] [
    selectElement(@@myString)
  ]

  at 2s..3s [
    selectElement("#box")
    animate({opacity: 1}, @@myNumber)  // ✅ NO ERROR - myNumber is 'number'
  ] [
    selectElement("#box")
    animate({opacity: 0}, @@myNumber)
  ]
}

// ============================================================================
// Success Criteria (T058)
// ============================================================================
//
// Out of 10 unannotated parameters/variables above:
// - selector (fadeIn) → ✅ Inferred as 'string'
// - duration (fade) → ✅ Inferred as 'number'
// - value (broken) → ⚠️  Conflicting usage detected (EXPECTED ERROR)
// - selector (complexAction) → ✅ Inferred as 'string'
// - duration (complexAction) → ✅ Inferred as 'number'
// - properties (complexAction) → ✅ Inferred as 'object'
// - myString → ✅ Inferred as 'string'
// - myNumber → ✅ Inferred as 'number'
// - myBoolean → ✅ Inferred as 'boolean'
// - myObject → ✅ Inferred as 'object'
// - myArray → ✅ Inferred as 'array'
//
// Success rate: 10/11 clear patterns (90.9%) → ✅ PASS (target 90%)
// 1 conflict correctly detected → ✅ PASS
