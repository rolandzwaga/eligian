/**
 * Operation Registry Generator
 *
 * This script generates the operation registry by importing all Eligius metadata
 * functions and converting them to our OperationSignature format.
 *
 * Run with: npm run generate:registry
 *
 * Output: packages/compiler/src/operations/registry.generated.ts
 */

import { writeFileSync } from 'node:fs';
import { dirname, join } from 'node:path';
import { fileURLToPath } from 'node:url';
import { metadata } from 'eligius';
import { convertMetadata } from './metadata-converter.js';
import type { OperationRegistry } from './types.js';

// Get __dirname equivalent in ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// No custom mappings needed - use Eligius operation names and categories directly

/**
 * Generate the operation registry by converting all Eligius metadata.
 */
function generateRegistry(): OperationRegistry {
  const registry: OperationRegistry = {};

  // Iterate through all exported metadata functions
  for (const [functionName, metadataFunction] of Object.entries(metadata)) {
    // Skip non-function exports (like types)
    if (typeof metadataFunction !== 'function') continue;

    // Get the system name for this     // Use Eligius function name directly as system name (no custom mapping)
    const systemName = functionName;

    // Call the metadata function to get IOperationMetadata
    const operationMetadata = metadataFunction();

    // Extract category directly from Eligius metadata (no hardcoded lookup)
    const category = operationMetadata.category;

    const signature = convertMetadata(systemName, operationMetadata, category);

    // Add to registry
    registry[systemName] = signature;
  }

  return registry;
}

/**
 * Generate TypeScript code for the registry file.
 */
function generateRegistryCode(registry: OperationRegistry): string {
  const registryJson = JSON.stringify(registry, null, 2);

  return `/**
 * Generated Operation Registry
 *
 * This file is auto-generated by generate-registry.ts
 * DO NOT EDIT MANUALLY - changes will be overwritten
 *
 * Generated: ${new Date().toISOString()}
 * Total operations: ${Object.keys(registry).length}
 */

import type { OperationRegistry } from './types.js';

export const OPERATION_REGISTRY: OperationRegistry = ${registryJson};
`;
}

/**
 * Main entry point - generate and write the registry file.
 */
function main() {
  // Generate registry from Eligius metadata
  const registry = generateRegistry();

  // Generate TypeScript code
  const code = generateRegistryCode(registry);

  // Write to output file
  const outputPath = join(__dirname, 'registry.generated.ts');
  writeFileSync(outputPath, code, 'utf-8');

  // Print summary by category
  const categoryCounts: Record<string, number> = {};
  for (const signature of Object.values(registry)) {
    const category = signature.category ?? 'Uncategorized';
    categoryCounts[category] = (categoryCounts[category] ?? 0) + 1;
  }

  for (const [_category, _count] of Object.entries(categoryCounts).sort()) {
  }
}

// Run main function
main();
