/**
 * Emitter: IR → Eligius JSON Configuration
 *
 * This module transforms the optimized Eligius IR into the final
 * JSON configuration format that the Eligius runtime engine expects.
 *
 * The emitter is the final stage in the compilation pipeline and
 * produces the actual output that users will load into Eligius.
 */

import { Effect } from 'effect';
import type {
    EligiusIR,
    TimelineConfigIR,
    TimelineActionIR,
    EndableActionIR,
    EventActionIR,
    OperationConfigIR,
    DurationIR,
    LabelIR,
    LanguageLabelIR,
    TimelineProviderSettingsIR
} from './types/eligius-ir.js';
import type { EmitError } from './types/errors.js';

// Import Eligius types (we installed eligius@1.1.4 in compiler package)
import type { IEngineConfiguration } from 'eligius';

/**
 * SA004: Main emission function - EligiusIR → IEngineConfiguration (JSON)
 *
 * Converts the internal IR to the complete Eligius IEngineConfiguration format.
 * This includes all required fields: id, engine, timelines, action layers, labels, etc.
 */
export const emitJSON = (ir: EligiusIR): Effect.Effect<IEngineConfiguration, EmitError> =>
    Effect.gen(function* (_) {
        // Emit timelines array
        const timelines: any[] = [];
        for (const timeline of ir.timelines) {
            const emittedTimeline = yield* _(emitTimelineConfig(timeline));
            timelines.push(emittedTimeline);
        }

        // Emit action layers
        const initActions: any[] = [];
        for (const action of ir.initActions) {
            const emittedAction = yield* _(emitEndableAction(action));
            initActions.push(emittedAction);
        }

        const actions: any[] = [];
        for (const action of ir.actions) {
            const emittedAction = yield* _(emitEndableAction(action));
            actions.push(emittedAction);
        }

        const eventActions: any[] = [];
        for (const action of ir.eventActions) {
            const emittedAction = yield* _(emitEventAction(action));
            eventActions.push(emittedAction);
        }

        // Build complete IEngineConfiguration
        const config: IEngineConfiguration = {
            // Constitution VII: Preserve UUIDs generated by transformer
            id: ir.id,
            engine: {
                systemName: ir.engine.systemName
            },
            containerSelector: ir.containerSelector,
            language: ir.language,
            layoutTemplate: ir.layoutTemplate,
            availableLanguages: ir.availableLanguages.map(emitLabel),
            labels: ir.labels.map(emitLanguageLabel),

            // Action layers
            initActions,
            actions,
            eventActions,

            // Timeline configuration
            timelines,
            ...(ir.timelineFlow && { timelineFlow: ir.timelineFlow }),
            ...(ir.timelineProviderSettings && {
                timelineProviderSettings: emitTimelineProviderSettings(ir.timelineProviderSettings)
            }),

            // Metadata (optional)
            ...(ir.metadata && {
                metadata: {
                    generatedBy: `Eligian DSL Compiler v${ir.metadata.compilerVersion}`,
                    version: ir.metadata.dslVersion,
                    timestamp: ir.metadata.compiledAt,
                    ...(ir.metadata.sourceFile && { sourceFile: ir.metadata.sourceFile })
                }
            })
        };

        return config;
    });

/**
 * SA004: Emit TimelineConfig - TimelineConfigIR → Eligius Timeline config
 */
export const emitTimelineConfig = (timeline: TimelineConfigIR): Effect.Effect<any, EmitError> =>
    Effect.gen(function* (_) {
        // Emit timeline actions
        const timelineActions: any[] = [];
        for (const action of timeline.timelineActions) {
            const emittedAction = yield* _(emitTimelineAction(action));
            timelineActions.push(emittedAction);
        }

        const config: any = {
            // Constitution VII: Preserve UUID generated by transformer
            id: timeline.id,
            uri: timeline.uri,
            type: timeline.type,
            duration: timeline.duration,
            loop: timeline.loop,
            selector: timeline.selector,
            timelineActions
        };

        return config;
    });

/**
 * SA004: Emit TimelineAction - TimelineActionIR → Eligius TimelineAction
 *
 * TimelineActions are timeline-bound actions that execute during specific time ranges.
 */
export const emitTimelineAction = (action: TimelineActionIR): Effect.Effect<any, EmitError> =>
    Effect.gen(function* (_) {
        // Emit duration
        const duration = emitDuration(action.duration);

        // Emit operations
        const startOperations: any[] = [];
        for (const op of action.startOperations) {
            const emittedOp = emitOperation(op);
            startOperations.push(emittedOp);
        }

        const endOperations: any[] = [];
        for (const op of action.endOperations) {
            const emittedOp = emitOperation(op);
            endOperations.push(emittedOp);
        }

        const config: any = {
            // Constitution VII: Preserve UUID
            id: action.id,
            name: action.name,
            duration,
            startOperations,
            endOperations
        };

        return config;
    });

/**
 * SA004: Emit EndableAction - EndableActionIR → Eligius Action
 *
 * EndableActions are used in initActions and actions arrays.
 */
export const emitEndableAction = (action: EndableActionIR): Effect.Effect<any, EmitError> =>
    Effect.gen(function* (_) {
        // Emit operations
        const startOperations: any[] = [];
        for (const op of action.startOperations) {
            const emittedOp = emitOperation(op);
            startOperations.push(emittedOp);
        }

        const endOperations: any[] = [];
        for (const op of action.endOperations) {
            const emittedOp = emitOperation(op);
            endOperations.push(emittedOp);
        }

        const config: any = {
            // Constitution VII: Preserve UUID
            id: action.id,
            name: action.name,
            startOperations,
            endOperations
        };

        return config;
    });

/**
 * SA004: Emit EventAction - EventActionIR → Eligius EventAction
 *
 * EventActions are triggered by custom events rather than timeline positions.
 */
export const emitEventAction = (action: EventActionIR): Effect.Effect<any, EmitError> =>
    Effect.gen(function* (_) {
        // Emit operations
        const startOperations: any[] = [];
        for (const op of action.startOperations) {
            const emittedOp = emitOperation(op);
            startOperations.push(emittedOp);
        }

        const config: any = {
            // Constitution VII: Preserve UUID
            id: action.id,
            name: action.name,
            eventName: action.eventName,
            startOperations
        };

        // Add optional event topic
        if (action.eventTopic) {
            config.eventTopic = action.eventTopic;
        }

        return config;
    });

/**
 * SA004: Emit Operation - OperationConfigIR → Eligius Operation
 */
function emitOperation(operation: OperationConfigIR): any {
    return {
        // Constitution VII: Preserve UUID
        id: operation.id,
        systemName: operation.systemName,
        operationData: operation.operationData
    };
}

/**
 * SA004: Emit Duration - DurationIR → Eligius Duration
 */
function emitDuration(duration: DurationIR): any {
    return {
        start: duration.start,
        end: duration.end
    };
}

/**
 * SA004: Emit Label - LabelIR → Eligius Label
 */
function emitLabel(label: LabelIR): any {
    return {
        code: label.code,
        label: label.label
    };
}

/**
 * SA004: Emit LanguageLabel - LanguageLabelIR → Eligius LanguageLabel
 */
function emitLanguageLabel(languageLabel: LanguageLabelIR): any {
    return {
        key: languageLabel.key,
        language: languageLabel.language,
        value: languageLabel.value
    };
}

/**
 * SA004: Emit TimelineProviderSettings
 */
function emitTimelineProviderSettings(settings: TimelineProviderSettingsIR): any {
    // TimelineProviderSettingsIR is already a Record<string, TimelineProviderSettingIR>
    const result: any = {};
    for (const key in settings) {
        const setting = settings[key];
        result[key] = {
            id: setting.id,
            vendor: setting.vendor,
            systemName: setting.systemName,
            ...(setting.selector && { selector: setting.selector }),
            ...(setting.poster && { poster: setting.poster })
        };
    }
    return result;
}
