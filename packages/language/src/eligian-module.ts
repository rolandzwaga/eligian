import { inject, type Module } from 'langium';
import {
  createDefaultModule,
  createDefaultSharedModule,
  type DefaultSharedModuleContext,
  type LangiumServices,
  type LangiumSharedServices,
  type PartialLangiumServices,
} from 'langium/lsp';
import {
  createTypirLangiumServices,
  initializeLangiumTypirServices,
  type TypirLangiumServices,
} from 'typir-langium';
import { CSSRegistryService } from './css/css-registry.js';
import { EligianCodeActionProvider } from './eligian-code-action-provider.js';
import { EligianCompletionProvider } from './eligian-completion-provider.js';
import { EligianDocumentValidator } from './eligian-document-validator.js';
import { EligianHoverProvider } from './eligian-hover-provider.js';
import { EligianScopeProvider } from './eligian-scope-provider.js';
import { EligianValidator, registerValidationChecks } from './eligian-validator.js';
import { EligianAstReflection } from './generated/ast.js';
import { EligianGeneratedModule, EligianGeneratedSharedModule } from './generated/module.js';
import { type EligianSpecifics, EligianTypeSystem } from './type-system-typir/index.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type EligianAddedServices = {
  validation: {
    EligianValidator: EligianValidator;
  };
  lsp: {
    HoverProvider: EligianHoverProvider;
    CompletionProvider: EligianCompletionProvider;
    CodeActionProvider: EligianCodeActionProvider;
  };
  css: {
    CSSRegistry: CSSRegistryService;
  };
  typir: TypirLangiumServices<EligianSpecifics>;
};

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type EligianServices = LangiumServices & EligianAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const EligianModule: Module<EligianServices, PartialLangiumServices & EligianAddedServices> =
  {
    references: {
      ScopeProvider: services => new EligianScopeProvider(services),
    },
    validation: {
      EligianValidator: services => new EligianValidator(services),
      DocumentValidator: services => new EligianDocumentValidator(services),
    },
    lsp: {
      HoverProvider: services => new EligianHoverProvider(services.css.CSSRegistry, services),
      CompletionProvider: services => new EligianCompletionProvider(services),
      CodeActionProvider: services => new EligianCodeActionProvider(services),
    },
    css: {
      CSSRegistry: () => new CSSRegistryService(),
    },
    typir: services =>
      createTypirLangiumServices(
        services.shared,
        new EligianAstReflection(),
        new EligianTypeSystem(),
        {}
      ),
  };

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createEligianServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices;
  Eligian: EligianServices;
} {
  const shared = inject(createDefaultSharedModule(context), EligianGeneratedSharedModule);
  const Eligian = inject(createDefaultModule({ shared }), EligianGeneratedModule, EligianModule);
  shared.ServiceRegistry.register(Eligian);

  // Initialize Typir services AFTER service creation
  initializeLangiumTypirServices(Eligian, Eligian.typir);

  registerValidationChecks(Eligian);
  if (!context.connection) {
    // We don't run inside a language server
    // Therefore, initialize the configuration provider instantly
    shared.workspace.ConfigurationProvider.initialized({});
  }
  return { shared, Eligian };
}
