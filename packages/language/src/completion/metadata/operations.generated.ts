/**
 * Generated Operation Metadata for Eligian Code Completion
 *
 * DO NOT EDIT THIS FILE MANUALLY - Generated by src/completion/generate-metadata.ts
 *
 * This file contains metadata imported from the Eligius npm package.
 * Source: import { metadata } from 'eligius' (version from packages/language/package.json)
 */

export interface OperationMetadata {
  name: string;
  description: string;
  parameters: ParameterMetadata[];
  dependencies: string[];
  outputs: string[];
}

export interface ParameterMetadata {
  name: string;
  type: string | Array<{ value: string }>;
  required: boolean;
  defaultValue?: unknown;
  description?: string;
}

/**
 * All Eligius operations (alphabetically sorted, filtered)
 * Total operations: 76
 */
export const OPERATIONS: OperationMetadata[] = [
  {
    "name": "addClass",
    "description": "This operation adds the specified class name to the specified selected element.",
    "parameters": [
      {
        "name": "className",
        "type": "ParameterType:className",
        "required": true
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "addControllerToElement",
    "description": "This operation adds the specified controller instance to the given selected element.",
    "parameters": [],
    "dependencies": [
      "selectedElement",
      "controllerInstance"
    ],
    "outputs": []
  },
  {
    "name": "addGlobalsToOperation",
    "description": "This operation adds the specified global property names to the current operation data.\nIt finally removes the `globalProperties` property from the current operation data.",
    "parameters": [
      {
        "name": "globalProperties",
        "type": "ParameterType:array",
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "animate",
    "description": "This operation animates the specified selected element with the given [jQuery animation](https://api.jquery.com/animate/) properties, duration and easing.\nIt resolves after the animation completes.",
    "parameters": [
      {
        "name": "animationEasing",
        "type": "ParameterType:boolean",
        "required": false
      },
      {
        "name": "animationProperties",
        "type": "ParameterType:object",
        "required": true
      },
      {
        "name": "animationDuration",
        "type": "ParameterType:number",
        "required": true
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "animateWithClass",
    "description": "This operation adds the specified class name to the specified selected element and assumes that this\nclass triggers and animation on the selected element. It then waits for this animation to complete\nbefore it resolves.",
    "parameters": [
      {
        "name": "className",
        "type": "ParameterType:className",
        "required": true
      },
      {
        "name": "removeClass",
        "type": "ParameterType:boolean",
        "required": false
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "announceToScreenReader",
    "description": "Announces a message to screen readers using an ARIA live region.",
    "parameters": [
      {
        "name": "message",
        "type": "ParameterType:string",
        "required": true
      },
      {
        "name": "priority",
        "type": [
          {
            "value": "polite"
          },
          {
            "value": "assertive"
          }
        ],
        "required": false
      }
    ],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "broadcastEvent",
    "description": "This operation broadcasts the given event through the eventbus, along with the\nevent arguments and optional event topic.",
    "parameters": [
      {
        "name": "eventArgs",
        "type": "ParameterType:array",
        "required": true
      },
      {
        "name": "eventTopic",
        "type": "ParameterType:eventTopic",
        "required": false
      },
      {
        "name": "eventName",
        "type": "ParameterType:eventName",
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "calc",
    "description": "This operation calculates the given left and right hand operands using the specified operator.",
    "parameters": [
      {
        "name": "left",
        "type": "ParameterType:number",
        "required": true
      },
      {
        "name": "right",
        "type": "ParameterType:number",
        "required": true
      },
      {
        "name": "operator",
        "type": [
          {
            "value": "+"
          },
          {
            "value": "-"
          },
          {
            "value": "*"
          },
          {
            "value": "/"
          },
          {
            "value": "%"
          },
          {
            "value": "**"
          }
        ],
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": [
      "calculationResult"
    ]
  },
  {
    "name": "clearElement",
    "description": "This operation removes all of the children from the given selected element.",
    "parameters": [],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "clearOperationData",
    "description": "This operation removes all of the properties on the current operation date.\nOr, if the `properties` property is set only removes the properties defined by that list.",
    "parameters": [
      {
        "name": "properties",
        "type": "ParameterType:array",
        "required": false
      }
    ],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "clearStorage",
    "description": "Clears data from browser storage (localStorage or sessionStorage).\n\nIf `key` is provided, removes only that key. If `key` is omitted, clears all storage.",
    "parameters": [
      {
        "name": "key",
        "type": "ParameterType:string",
        "required": false
      },
      {
        "name": "storageType",
        "type": [
          {
            "value": "local"
          },
          {
            "value": "session"
          }
        ],
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "compareDate",
    "description": "Compares two dates.\ncomparison: -1 (before), 0 (equal), 1 (after)",
    "parameters": [
      {
        "name": "date1",
        "type": [
          {
            "value": "string"
          },
          {
            "value": "number"
          },
          {
            "value": "Date"
          }
        ],
        "required": true
      },
      {
        "name": "date2",
        "type": [
          {
            "value": "string"
          },
          {
            "value": "number"
          },
          {
            "value": "Date"
          }
        ],
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": [
      "comparison",
      "isEqual",
      "isBefore",
      "isAfter"
    ]
  },
  {
    "name": "concatenateStrings",
    "description": "Concatenates multiple strings with an optional separator.",
    "parameters": [
      {
        "name": "strings",
        "type": "ParameterType:array",
        "required": true
      },
      {
        "name": "separator",
        "type": "ParameterType:string",
        "required": false
      }
    ],
    "dependencies": [],
    "outputs": [
      "result"
    ]
  },
  {
    "name": "createElement",
    "description": "This operation creates the DOM element described by the given elementName and attributes and assigns\nthe instance to the `template` property on the current operation data.",
    "parameters": [
      {
        "name": "elementName",
        "type": "ParameterType:htmlElementName",
        "required": true
      },
      {
        "name": "text",
        "type": "ParameterType:string",
        "required": false
      },
      {
        "name": "attributes",
        "type": "ParameterType:object",
        "required": false
      }
    ],
    "dependencies": [],
    "outputs": [
      "template"
    ]
  },
  {
    "name": "customFunction",
    "description": "This operation retrieves a custom function defined by the given system name\nand invokes it with the current operation data and eventbus.",
    "parameters": [
      {
        "name": "systemName",
        "type": "ParameterType:systemName",
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "endAction",
    "description": "This operation invokes the {@link EndableAction}.end method on the specified action instance.\n\nThe action operation data is first merged with the current operation data before it is\npassed on to the action. After the action has completed the action operation data properties\nare removed from the current operation data.",
    "parameters": [
      {
        "name": "actionOperationData",
        "type": "ParameterType:object",
        "required": true
      }
    ],
    "dependencies": [
      "actionInstance"
    ],
    "outputs": []
  },
  {
    "name": "endForEach",
    "description": "This operation checks if the current loop should end or start the next iteration.",
    "parameters": [],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "endWhen",
    "description": "This operation cleans up after the {@link when}/{@link otherwise}/{@link endWhen} control flow ends.",
    "parameters": [],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "extendController",
    "description": "Extends the current controller with given extension.",
    "parameters": [
      {
        "name": "controllerExtension",
        "type": "ParameterType:object",
        "required": true
      }
    ],
    "dependencies": [
      "controllerInstance"
    ],
    "outputs": []
  },
  {
    "name": "filterArray",
    "description": "Filters an array based on property equality or custom predicate function.\n\nOperates on arrayData passed from previous operations.\nSupports two filtering modes:\n1. Property equality: `filterProperty` and `filterValue` to filter by property match\n2. Custom predicate: `filterPredicate` function for complex filtering logic",
    "parameters": [
      {
        "name": "filterProperty",
        "type": "ParameterType:string",
        "required": false
      },
      {
        "name": "filterValue",
        "type": "ParameterType:object",
        "required": false
      },
      {
        "name": "filterPredicate",
        "type": "ParameterType:function",
        "required": false
      }
    ],
    "dependencies": [
      "arrayData"
    ],
    "outputs": [
      "filteredArray"
    ]
  },
  {
    "name": "findInArray",
    "description": "Finds the first element in an array matching criteria.\n\nOperates on arrayData passed from previous operations.\nSupports two search modes:\n1. Property equality: `findProperty` and `findValue` to find by property match\n2. Custom predicate: `findPredicate` function for complex search logic\n\nReturns `undefined` for `foundItem` and `-1` for `foundIndex` if no match found.",
    "parameters": [
      {
        "name": "findProperty",
        "type": "ParameterType:string",
        "required": false
      },
      {
        "name": "findValue",
        "type": "ParameterType:object",
        "required": false
      },
      {
        "name": "findPredicate",
        "type": "ParameterType:function",
        "required": false
      }
    ],
    "dependencies": [
      "arrayData"
    ],
    "outputs": [
      "foundItem",
      "foundIndex"
    ]
  },
  {
    "name": "formatDate",
    "description": "Formats a date using Intl.DateTimeFormat or simple patterns.",
    "parameters": [
      {
        "name": "format",
        "type": "ParameterType:string",
        "required": true
      }
    ],
    "dependencies": [
      "date"
    ],
    "outputs": [
      "formattedDate"
    ]
  },
  {
    "name": "formatText",
    "description": "Transforms text using format operations: uppercase, lowercase, capitalize, titlecase, or trim.\n\nOperates on textContent passed from previous operations (e.g., getTextContent).\n\nTransformations:\n- `uppercase`: Convert all characters to uppercase\n- `lowercase`: Convert all characters to lowercase\n- `capitalize`: Capitalize only the first letter\n- `titlecase`: Capitalize first letter of each word\n- `trim`: Remove leading and trailing whitespace",
    "parameters": [
      {
        "name": "transformation",
        "type": [
          {
            "value": "uppercase"
          },
          {
            "value": "lowercase"
          },
          {
            "value": "capitalize"
          },
          {
            "value": "titlecase"
          },
          {
            "value": "trim"
          }
        ],
        "required": true
      }
    ],
    "dependencies": [
      "textContent"
    ],
    "outputs": [
      "formattedText"
    ]
  },
  {
    "name": "getAttributesFromElement",
    "description": "This operation retrieves the values for the specified attribute names from the given selected element.",
    "parameters": [
      {
        "name": "attributeNames",
        "type": "ParameterType:array",
        "required": true
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": [
      "attributeValues"
    ]
  },
  {
    "name": "getControllerFromElement",
    "description": "This operation retrieves the controller instance with the specified name that is assigned to the given selected element.",
    "parameters": [
      {
        "name": "controllerName",
        "type": "ParameterType:controllerName",
        "required": true
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": [
      "controllerInstance"
    ]
  },
  {
    "name": "getControllerInstance",
    "description": "This operation retrieves an instance of the given controller name.\nIt assigns this instance to the `controllerInstance` property on the current operation data",
    "parameters": [
      {
        "name": "systemName",
        "type": [
          {
            "value": "DOMEventListenerController"
          },
          {
            "value": "LabelController"
          },
          {
            "value": "LottieController"
          },
          {
            "value": "NavigationController"
          },
          {
            "value": "ProgressbarController"
          },
          {
            "value": "RoutingController"
          },
          {
            "value": "SubtitlesController"
          }
        ],
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": [
      "controllerInstance"
    ]
  },
  {
    "name": "getCurrentTime",
    "description": "Gets the current time as timestamp and Date object.",
    "parameters": [],
    "dependencies": [],
    "outputs": [
      "timestamp",
      "date"
    ]
  },
  {
    "name": "getElementDimensions",
    "description": "This operation calculates the width and height of the given selected element.\nIt assigns this struct to the dimensions property on the current operation data.\nOptionally the width and height can be modified using the given modifier string.\n\nThe modifier string is formatted in the following way:\n\n<operator><amount><optional-side><optional-precentage>|<ratio-definition>\n\nWhere the ratio modifier is formatted in the following way:\n<side>[ar=<ratio-left>-<ratio-right>]\n\nFor example, this modifier '+100h|w[ar=8-1]' will modifiy the dimensions like this:\nit will add a value of 100 to the height and modify the width by a ratio of 8 to 1 relative to the height.",
    "parameters": [
      {
        "name": "modifier",
        "type": "ParameterType:dimensionsModifier",
        "required": false
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": [
      "dimensions"
    ]
  },
  {
    "name": "getFocusedElement",
    "description": "Gets the currently focused element.",
    "parameters": [],
    "dependencies": [],
    "outputs": [
      "focusedElement"
    ]
  },
  {
    "name": "getFormData",
    "description": "Extracts all input, select, and textarea values from form element into operation data.\n\nThis operation reads form field values and returns them as an object with field names as keys.\nOnly processes form elements that are enabled and not hidden. Handles checkboxes, radio buttons,\nselect elements, textareas, and text inputs.",
    "parameters": [],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": [
      "formData"
    ]
  },
  {
    "name": "getImport",
    "description": "This operation retrieves the import specified by the given `systemName` and\nassigns it to the `importedInstance` property on the current operaton date.",
    "parameters": [
      {
        "name": "systemName",
        "type": "ParameterType:systemName",
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": [
      "importedInstance"
    ]
  },
  {
    "name": "getQueryParams",
    "description": "This operation retrieves the current query parameters from the browser's address bar and places\nthem on the returned operation data.",
    "parameters": [
      {
        "name": "defaultValues",
        "type": "ParameterType:object",
        "required": false
      }
    ],
    "dependencies": [],
    "outputs": [
      "queryParams"
    ]
  },
  {
    "name": "getScrollPosition",
    "description": "Gets the current scroll position of the viewport.\n\nReturns x (horizontal) and y (vertical) scroll positions in pixels.\nUses cross-browser compatible methods to retrieve scroll position.",
    "parameters": [],
    "dependencies": [],
    "outputs": [
      "scrollX",
      "scrollY"
    ]
  },
  {
    "name": "getTextContent",
    "description": "Extracts text content from element, stripping all HTML markup.\n\nUses jQuery's `.text()` method which is XSS-safe and returns only the text content\nwithout any HTML tags. Preserves whitespace and text from nested elements.",
    "parameters": [],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": [
      "textContent"
    ]
  },
  {
    "name": "httpDelete",
    "description": "Performs an HTTP DELETE request to the specified URL.",
    "parameters": [
      {
        "name": "url",
        "type": "ParameterType:string",
        "required": true
      },
      {
        "name": "headers",
        "type": "ParameterType:object",
        "required": false
      }
    ],
    "dependencies": [],
    "outputs": [
      "response",
      "status"
    ]
  },
  {
    "name": "httpPost",
    "description": "Performs an HTTP POST request to the specified URL.",
    "parameters": [
      {
        "name": "url",
        "type": "ParameterType:string",
        "required": true
      },
      {
        "name": "body",
        "type": "ParameterType:object",
        "required": false
      },
      {
        "name": "headers",
        "type": "ParameterType:object",
        "required": false
      }
    ],
    "dependencies": [],
    "outputs": [
      "response",
      "status"
    ]
  },
  {
    "name": "httpPut",
    "description": "Performs an HTTP PUT request to the specified URL.",
    "parameters": [
      {
        "name": "url",
        "type": "ParameterType:string",
        "required": true
      },
      {
        "name": "body",
        "type": "ParameterType:object",
        "required": false
      },
      {
        "name": "headers",
        "type": "ParameterType:object",
        "required": false
      }
    ],
    "dependencies": [],
    "outputs": [
      "response",
      "status"
    ]
  },
  {
    "name": "invokeObjectMethod",
    "description": "This operation invokes the specified method on the given object with the given optional arguments\nand assigns the result to the `methodResult` operationdata property.",
    "parameters": [
      {
        "name": "methodName",
        "type": "ParameterType:string",
        "required": true
      },
      {
        "name": "methodArguments",
        "type": "ParameterType:array",
        "required": false
      }
    ],
    "dependencies": [
      "instance"
    ],
    "outputs": [
      "methodResult"
    ]
  },
  {
    "name": "isElementInViewport",
    "description": "Checks if an element is currently visible within the viewport.\n\nUses `getBoundingClientRect()` to determine if the element is within the viewport boundaries.",
    "parameters": [],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": [
      "isInViewport"
    ]
  },
  {
    "name": "loadFromStorage",
    "description": "Loads data from browser storage (localStorage or sessionStorage).\n\nDeserializes the stored JSON value. Returns `null` if key doesn't exist.",
    "parameters": [
      {
        "name": "key",
        "type": "ParameterType:string",
        "required": true
      },
      {
        "name": "storageType",
        "type": [
          {
            "value": "local"
          },
          {
            "value": "session"
          }
        ],
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": [
      "loadedValue"
    ]
  },
  {
    "name": "loadJson",
    "description": "This operation loads a JSON file from the specified url and assigns it to the json\nproperty on the current operation data.\n\nIf the cache property is set to true and a cached value already exists, this is assigned\ninstead of re-retrieving it from the url.",
    "parameters": [
      {
        "name": "url",
        "type": "ParameterType:string",
        "required": true
      },
      {
        "name": "cache",
        "type": "ParameterType:boolean",
        "required": false
      }
    ],
    "dependencies": [],
    "outputs": [
      "json"
    ]
  },
  {
    "name": "log",
    "description": "This operation logs the specified value, or, when no logValue property has been assigned\nit will log the current operation data, global data and scope to the console",
    "parameters": [
      {
        "name": "logValue",
        "type": "ParameterType:object|ParameterType:string|ParameterType:number|ParameterType:boolean|ParameterType:array",
        "required": false
      },
      {
        "name": "logName",
        "type": "ParameterType:string",
        "required": false
      }
    ],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "mapArray",
    "description": "Transforms each element of an array using a mapping function.\n\nOperates on arrayData passed from previous operations.\nThe mapFunction receives each item and optionally its index.",
    "parameters": [
      {
        "name": "mapFunction",
        "type": "ParameterType:function",
        "required": true
      }
    ],
    "dependencies": [
      "arrayData"
    ],
    "outputs": [
      "mappedArray"
    ]
  },
  {
    "name": "math",
    "description": "This operation performs the given math function with the specified arguments.",
    "parameters": [
      {
        "name": "args",
        "type": "ParameterType:array",
        "required": true
      },
      {
        "name": "functionName",
        "type": "ParameterType:mathfunction",
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": [
      "mathResult"
    ]
  },
  {
    "name": "otherwise",
    "description": "If the preceeding {@link when} operation evaluates to `true` subsequent operations will\nbe skipped until an {@link endWhen} operation is encountered.",
    "parameters": [],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "removeClass",
    "description": "This operation removes the spcified class name from the given selected element.",
    "parameters": [
      {
        "name": "className",
        "type": "ParameterType:className",
        "required": true
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "removeControllerFromElement",
    "description": "This operation removes the controller with the specified name from the given selected element.",
    "parameters": [
      {
        "name": "controllerName",
        "type": "ParameterType:controllerName",
        "required": true
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "removeElement",
    "description": "This operation removes the given selected element from the DOM.",
    "parameters": [],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "removePropertiesFromOperationData",
    "description": "This operation removes the given list of properties from the current operation data.\nIt will also remove the property `propertyNames` from the result.",
    "parameters": [
      {
        "name": "propertyNames",
        "type": "ParameterType:array",
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "reparentElement",
    "description": "This operation moves the given selected element to the new parent that is defined\nby the specified `newParentSelector`.",
    "parameters": [
      {
        "name": "newParentSelector",
        "type": "ParameterType:selector",
        "required": true
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "replaceString",
    "description": "Replaces occurrences of a pattern in a string (alias for replaceText for string context).",
    "parameters": [
      {
        "name": "pattern",
        "type": [
          {
            "value": "string"
          },
          {
            "value": "RegExp"
          }
        ],
        "required": true
      },
      {
        "name": "replacement",
        "type": "ParameterType:string",
        "required": true
      }
    ],
    "dependencies": [
      "textContent"
    ],
    "outputs": [
      "result"
    ]
  },
  {
    "name": "replaceText",
    "description": "Finds and replaces text using literal string or regex pattern.\n\nOperates on textContent passed from previous operations (e.g., getTextContent).\nSupports regex patterns with global flag for multiple replacements.\nUpdates textContent with replaced text and sets replacementCount.",
    "parameters": [
      {
        "name": "searchPattern",
        "type": [
          {
            "value": "string"
          },
          {
            "value": "RegExp"
          }
        ],
        "required": true
      },
      {
        "name": "replacement",
        "type": "ParameterType:string",
        "required": true
      }
    ],
    "dependencies": [
      "textContent"
    ],
    "outputs": [
      "replacementCount"
    ]
  },
  {
    "name": "requestAction",
    "description": "This operation requests an action instance with the specified name and assigns it\nto the `actionInstance` property on the current operation data.",
    "parameters": [
      {
        "name": "systemName",
        "type": "ParameterType:actionName",
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": [
      "actionInstance"
    ]
  },
  {
    "name": "saveToStorage",
    "description": "Saves data to browser storage (localStorage or sessionStorage).\n\nSerializes the value as JSON before storing. Supports any JSON-serializable data type.",
    "parameters": [
      {
        "name": "key",
        "type": "ParameterType:string",
        "required": true
      },
      {
        "name": "value",
        "type": "ParameterType:object",
        "required": true
      },
      {
        "name": "storageType",
        "type": [
          {
            "value": "local"
          },
          {
            "value": "session"
          }
        ],
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "scrollToElement",
    "description": "Scrolls the viewport to bring the selected element into view.\n\nUses the browser's `scrollIntoView` API with configurable behavior.",
    "parameters": [
      {
        "name": "behavior",
        "type": [
          {
            "value": "auto"
          },
          {
            "value": "smooth"
          }
        ],
        "required": false
      },
      {
        "name": "block",
        "type": [
          {
            "value": "start"
          },
          {
            "value": "center"
          },
          {
            "value": "end"
          },
          {
            "value": "nearest"
          }
        ],
        "required": false
      },
      {
        "name": "inline",
        "type": [
          {
            "value": "start"
          },
          {
            "value": "center"
          },
          {
            "value": "end"
          },
          {
            "value": "nearest"
          }
        ],
        "required": false
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "scrollToPosition",
    "description": "Scrolls the viewport to a specific x,y coordinate position.\n\nUses the browser's `window.scrollTo` API with configurable behavior.",
    "parameters": [
      {
        "name": "x",
        "type": "ParameterType:number",
        "required": true
      },
      {
        "name": "y",
        "type": "ParameterType:number",
        "required": true
      },
      {
        "name": "behavior",
        "type": [
          {
            "value": "auto"
          },
          {
            "value": "smooth"
          }
        ],
        "required": false
      }
    ],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "selectElement",
    "description": "This operation selects one or more elements using the specified selector.\n\nIf `useSelectedElementAsRoot` is set to true and a valid DOM element is assigned\nto the current operation data's `selectedElement` property\nthen the element will be looked for only in the descendant elements of this DOM element.",
    "parameters": [
      {
        "name": "selector",
        "type": "ParameterType:selector",
        "required": true
      },
      {
        "name": "useSelectedElementAsRoot",
        "type": "ParameterType:boolean",
        "required": false
      }
    ],
    "dependencies": [],
    "outputs": [
      "selectedElement"
    ]
  },
  {
    "name": "setData",
    "description": "This operation assigns the specified properties to the specified data targets.",
    "parameters": [
      {
        "name": "properties",
        "type": "ParameterType:object",
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "setElementAttributes",
    "description": "This operation sets the specified set of attributes on the given selected element.",
    "parameters": [
      {
        "name": "attributes",
        "type": "ParameterType:object",
        "required": true
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "setElementContent",
    "description": "This operation sets the specified content defined by the value assigned to the template property\nto the given selected element.\n\nWhen the `insertionType` is set to `overwrite` the contents of the selected element are replaced\nby the given template.\nWhen set to `append` the new content will be inserted after the current content.\nWhen set to `prepend` the new content will be inserted before the current content.",
    "parameters": [
      {
        "name": "template",
        "type": [
          {
            "value": "string"
          },
          {
            "value": "Element"
          },
          {
            "value": "Text"
          },
          {
            "value": "Comment"
          },
          {
            "value": "Document"
          },
          {
            "value": "DocumentFragment"
          }
        ],
        "required": false
      },
      {
        "name": "insertionType",
        "type": [
          {
            "value": "overwrite"
          },
          {
            "value": "append"
          },
          {
            "value": "prepend"
          }
        ],
        "required": false
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "setFocus",
    "description": "Sets focus to the selected element.",
    "parameters": [],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "setFormValue",
    "description": "Sets the value of an input, select, or textarea element.\n\nHandles different input types appropriately:\n- Text inputs, textareas, selects: sets value directly\n- Checkboxes: sets checked property for boolean values\n- Radio buttons: sets checked property for boolean values\n- Number inputs: converts to string",
    "parameters": [
      {
        "name": "value",
        "type": [
          {
            "value": "string"
          },
          {
            "value": "number"
          },
          {
            "value": "false"
          },
          {
            "value": "true"
          }
        ],
        "required": true
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "setGlobalData",
    "description": "This operation copies the specified properties from the operationData to the global data.",
    "parameters": [
      {
        "name": "propertyNames",
        "type": "ParameterType:array",
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "setOperationData",
    "description": "This operation assigns the specified properties to the current operation data.\nWhen override is set to true the properties replace the current operation data entirely.",
    "parameters": [
      {
        "name": "override",
        "type": "ParameterType:boolean",
        "required": false
      },
      {
        "name": "properties",
        "type": "ParameterType:object",
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "setStyle",
    "description": "This operation assigns the specified CSS style properties to the\ngiven selected element.",
    "parameters": [
      {
        "name": "properties",
        "type": "ParameterType:cssProperties",
        "required": true
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "setVariable",
    "description": "This operation sets a variable with the specified name on the scope with the specified value.",
    "parameters": [
      {
        "name": "name",
        "type": "ParameterType:string",
        "required": true
      },
      {
        "name": "value",
        "type": "ParameterType:object|ParameterType:string|ParameterType:number|ParameterType:boolean|ParameterType:array",
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "sortArray",
    "description": "Sorts an array by property, natural order, or custom comparator function.\n\nOperates on arrayData passed from previous operations.\nSupports three sorting modes:\n1. Property sort: `sortProperty` and `sortOrder` to sort objects by property\n2. Natural sort: `sortOrder` alone for primitive arrays\n3. Custom comparator: `sortComparator` function for complex sorting logic",
    "parameters": [
      {
        "name": "sortProperty",
        "type": "ParameterType:string",
        "required": false
      },
      {
        "name": "sortOrder",
        "type": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ],
        "required": false
      },
      {
        "name": "sortComparator",
        "type": "ParameterType:function",
        "required": false
      }
    ],
    "dependencies": [
      "arrayData"
    ],
    "outputs": [
      "sortedArray"
    ]
  },
  {
    "name": "splitString",
    "description": "Splits a string into an array by delimiter (string or regex).",
    "parameters": [
      {
        "name": "delimiter",
        "type": [
          {
            "value": "string"
          },
          {
            "value": "RegExp"
          }
        ],
        "required": true
      },
      {
        "name": "limit",
        "type": "ParameterType:number",
        "required": false
      }
    ],
    "dependencies": [
      "textContent"
    ],
    "outputs": [
      "resultArray"
    ]
  },
  {
    "name": "startAction",
    "description": "This operation starts the specified action instance using the given action operation data.\n\nThe action operation data is first merged with the current operation data before it is\npassed on to the action. After the action has completed the action operation data properties\nare removed from the current operation data.",
    "parameters": [
      {
        "name": "actionOperationData",
        "type": "ParameterType:object",
        "required": false
      }
    ],
    "dependencies": [
      "actionInstance"
    ],
    "outputs": []
  },
  {
    "name": "substringText",
    "description": "Extracts a substring from text between start and end indices.",
    "parameters": [
      {
        "name": "start",
        "type": "ParameterType:number",
        "required": true
      },
      {
        "name": "end",
        "type": "ParameterType:number",
        "required": false
      }
    ],
    "dependencies": [
      "textContent"
    ],
    "outputs": [
      "substring"
    ]
  },
  {
    "name": "toggleClass",
    "description": "This operation toggles the specfied class name on the given selected element.\n\nMeaning, if the specified class name exists on the given element it will be removed,\notherwise it will be added.",
    "parameters": [
      {
        "name": "className",
        "type": "ParameterType:className",
        "required": true
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "toggleElement",
    "description": "This operation toggles the visibility of the given selected element.\n\nMeaning, if the element is hidden, it will be made visible, otherwise\nit will be hidden.",
    "parameters": [],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "toggleFormElement",
    "description": "Enables or disables form input elements (inputs, selects, textareas, buttons).\n\nSets the `disabled` property on the element. When `enabled` is true, removes the disabled\nattribute; when false, adds the disabled attribute.",
    "parameters": [
      {
        "name": "enabled",
        "type": "ParameterType:boolean",
        "required": true
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": []
  },
  {
    "name": "validateForm",
    "description": "Validates form fields against HTML5 validation and custom rules.\n\nUses HTML5 validation API (checkValidity()) for native validation, and supports\ncustom validation rules for: required, minLength, maxLength, pattern (regex), and email format.",
    "parameters": [
      {
        "name": "validationRules",
        "type": "ParameterType:object",
        "required": false
      }
    ],
    "dependencies": [
      "selectedElement"
    ],
    "outputs": [
      "validationErrors",
      "isValid"
    ]
  },
  {
    "name": "wait",
    "description": "This operation waits for the specified amount of milliseconds.",
    "parameters": [
      {
        "name": "milliseconds",
        "type": "ParameterType:number",
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": []
  },
  {
    "name": "when",
    "description": "When the given expression evaluates to false, subsequent operations will be skipped\nuntil an {@link endWhen} or {@link otherwise} operation is encountered.\n\nPractically, this means an `if` or `if`/`else` statement control flow implementation in a list of operations.\n\nThe expression is passed in as a formatted string.\nThe left and right values of the expression can be defined like this:\n\n'constant': for a constant string\n100: for a constant number\n$operationData.foo: for an operation data value\n$globaldata.foo: for a global data value\n$scope.loopIndex: for a scope value",
    "parameters": [
      {
        "name": "expression",
        "type": "ParameterType:expression",
        "required": true
      }
    ],
    "dependencies": [],
    "outputs": []
  }
];

/**
 * Operations filtered from completions (handled by DSL keywords)
 */
export const FILTERED_OPERATIONS = new Set([
  'breakForEach',
  'continueForEach',
  'ifCondition',
  'elseCondition',
  'forEach'
]);
